#!/usr/bin/env python
import sys
from Sequence import *
from Tree import *
from Bio import SeqIO

	#s = BiologicalSequence( "TAGAGATACACTGACTTACTTTCAAATACTATAAAACGGAATAGCCTAAGAATGAAATAAAGTAAAACATGACCATCAGGAGAAAGTTGAACAACTAGAGAGGGAGAATATTAAGCTTTATGCCCAATTAAAAAAGCTTGCAAAAAGTGAAAGAAATCTAATGAAGAAACTAGACGAAAGAGACCGGGAGATAACCAATCTAAAAGATACAAACATGAGGTTCAATTACAAACTCAATAGAGCACTCTATGCTAATGAAGAGCTGCAAAATAAAGTAACTGAATCTGACTACAAACTTCAACAAAAAAGAGATGAATTTATGAAAGACATAGAGCAAACTAACCAAATCC", DNA=True )
	#sequence = "ATCGGAAGAGGCAATTTCATAATAACATTTACACTAAGCTGAAGCCCAAGGAAATGAACTCCCATTTTAGCGATTATAATGAGACCAGGTATGAAGTCACTACTGGGTTTAATAGCAAGAAGATCAAACTTAAGGTTAGTACTAACACCGAAGGGGATGAACAGAGCAAGCCTATGAATAAGAGGACTTTTAAGAACGATATACTTGAGAAGGAGGAGGATCCCACTGGGAAGAAAACTGTGGTGTATAAGGATTTTATAGACTTTTGTAAAATTCATAAGGGGCAGATTTTTGGGTATAGAACTATCATGCCTCTTGAGTTTTATATTATGTCAAAATAGAACCGATTATGAGAGGGAGTTTATAAAAAGGGCTGAGAAGGAAGAGATTCAGAAGTTCTTTAATGAAGCATGAGTATCCATTGTGGCTAACTCAGCAATCGTTGAGACCTTTATCTTTGAAAAGGCTTTAATGTCTTTTCTACCAGAACACCTGTCTCAGGCTTTCTTCAAGGATTTACTGAATTGCAAAGAGCATGACAGGCCTGCTAATATCGTTGAGAAAGGCAAGAACGATAGTATTATTGGAAGTATTATCAAGATGAATAAAGAAGATGATTTATGGGATAATACTAAAAACAAAATTATTGATAAGACGCTCAAAGCGTCCTATATCGAGAGACACAAGGCTTTAG"
	#min_len = 800
	#for m in xrange( len( sequence )//min_len + 1 ):
		#subseq = sequence[m*min_len:(m+1)*min_len]
		#s = BiologicalSequence( subseq, DNA=True )
	#s = BiologicalSequence( "ATCGGAAGAGGCAATTTCATAATAACATTTACACTAAGCTGAAGCCCAAGGAAATGAACTCCCATTTTAGCGATTATAATGAGACCAGGTATGAAGTCACTACTGGGTTTAATAGCAAGAAGATCAAACTTAAGGTTAGTACTAACACCGAAGGGGATGAACAGAGCAAGCCTATGAATAAGAGGACTTTTAAGAACGATATACTTGAGAAGGAGGAGGATCCCACTGGGAAGAAAACTGTGGTGTATAAGGATTTTATAGACTTTTGTAAAATTCATAAGGGGCAGATTTTTGGGTATAGAACTATCATGCCTCTTGAGTTTTATATTATGTCAAAATAGAACCGATTATGAGAGGGAGTTTATAAAAAGGGCTGAGAAGGAAGAGATTCAGAAGTTCTTTAATGAAGCATGAGTATCCATTGTGGCTAACTCAGCAATCGTTGAGACCTTTATCTTTGAAAAGGCTTTAATGTCTTTTCTACCAGAACACCTGTCTCAGGCTTTCTTCAAGGATTTACTGAATTGCAAAGAGCATGACAGGCCTGCTAATATCGTTGAGAAAGGCAAGAACGATAGTATTATTGGAAGTATTATCAAGATGAATAAAGAAGATGATTTATGGGATAATACTAAAAACAAAATTATTGATAAGACGCTCAAAGCGTCCTATATCGAGAGACACAAGGCTTTAG", DNA=True )
	#s = BiologicalSequence( "TTTCGAAAATGAAAAGACAGATCACTCATCTCTAAAGTATCATACTCCCATTAAGAGCAACAGCAGCTCAAAATTTGAATTCCAAAATGGACTCTCAAGGCTAAAAGATAACAGAAAATCAGTCAGCATAAATGAAAAATTCAATGAAATCCAGAACTATGACCCTGAAGAACGCACAAGCAGTGCTAAAGATGGGCTAACCTCCCATCTTCGCAAATTCCTGTTCAAAGAACTTGATAAAATGAGAGACGATGTGCGCAAAAGTAACAGTCATCTCAGCAAGAGCATATCTGACAATGAGGAGTTTTACTCAAACAAGCTAGATGACCTCAAGAGAAAAGTTAAATCAGAAATTATTCCAGCTTCGGATATCCAACGGCTAGTCGAGCACACTATAGACTCCAAGCTGAGAGAAATGAATGTAACAGACAATTCTGATAATAGAGAACACTCTAAGACTCAGTTACAGGTACATACATTGGCAAACCACTTTAAATCATGCCAAAAGCTGGTCAAAGAGCTTCAGAGCGACATTGATGTTCTAACCAAAAGAATCGATGAGTCCGAAAGAAAATCTGGCATGAACGAGATGGACTACGACCGCAAGCAAAGACTCGTTGACAACCATATCAATGAAGTTAAAGATGACTCAAAGAGTTACACAGACTCTGAGGTTTCCAAATTAGATTCTCGCTTGGAAGTCTTAGAAAATAAAATGAAAAAAGATAAAG", DNA=True )
	#s = BiologicalSequence( "AGATACGACAGGAAAAGACTCCAAAACATGAAGTATGACTTGTATAAACAGAACCAACAGAAAAAGCTAGGACTTGTGCTTGACAATCGGGGGAATTTTGAAACTGTAGATGATAGGATTGTAGTTTATAGACATCTGGGGCATTTCGAGATCAAAGATGGCTACACTTGGAAGATACATTCAAGCTGTTGGATTTGTGACCAGTGGAAGTACACTTGTGTCATTGTGAATCCATCTACAATCG", DNA=True )
	#s = BiologicalSequence( "AGGTATCCGTCATTCTCATCGAGGAGGACCGATGGGATAATAACGATTAGCGACGATATCTGATTCGCCACTGAAGCACTTAAGGGAGCCGGGGTACTTCTCCCATTAGTTTGAGCGGGTAAGAATATCCTCCAACATACGGCGCACATATCACACGAATAAGCTACTCACGAGGTCGCCGTTAATGGGAATCCCCTTGGACTTGGACCTGCCCGTCCTGTGCCCTCCGAACAAAATACTTTTATGTCGATTTGCCGGGGGATAGATCGCCCGCCGAACTGATATGATTGATAACTTCTTCGGAGGGGCGTACGCAAAGCTCGCTGTTATCTCAAAAAAATACATATCCTTGTTCTAAATTCTTAACCAGTCGAAGCAATGGCTGTTCACATCTGATCATCCATTCGGGGCAGACTGTGCTCTACCATCGACTACCTGGTCCGTTCACATCCCCCGACAACATGTGTGAAAAGCCGACCAT", DNA=True )
	#s = BiologicalSequence( "TCAAACCGAGACTTACTAAAGTTGATCATCATAAGACTCTTGACCATCATACAGTTACAGTAAATAAAGTGGCTAAAAGTCGTCCTTTCTCTCCTGAAGCTAGGCATAAAAAGCTACTTGACGATATTACGAACATAAAACTTGCGAAGGAGTCATGTGAGAACCCTATTTTCTTACTTTCCCCACGCCCTGAGCATCCAAGGTCGCATCAGCCACAGGTGCCTACTAGGAGAA", DNA=True )
	#s = BiologicalSequence( "GGTCAGTGGAGGAGGTGATGGAATTGTAGTATTCTGGATGGCAAATGAAGATGAAGCTTACTATAAAATTGATAAAGCACATTACGGAGCATGCTGGGACCTTGCTTGGCACCCTATGGGAAACTGCCTAGCAACTGCAGGCAATGATACCTTCTTACAACTCTGGGCAAGACCAAAGCCTGGTGAAGGACTTGAAGACCCAAAAATTAGGCTTGATGAACGGGTTGCCGAAATGAACCAAGCAAAGCCTGCTGGTATGTATGGAGGATCTAAACTATTTGCTGATAAGAGCTACATCAGTCATAAGAAAGCCCAGTCGTTGGCTAAGAGTAAAGAGAATATCCAAAGAGGTTCTAAAAGAATGTAGCTCTTGTAATACATGAACTCTGATATCTTCAATATTTATGAACTAATTTTTGAAAATATCAG", DNA=True )
	#s = BiologicalSequence( "TTTATGCTTGGCGATTGCTACTTCTTTATCCTTTTGCTATTGTTCCATATACTTATGTGACTTCCTTTATATTTACTGAGGAAGGGCCAGCTCAAAACTTTACTATTTTGCATCACTTTTTCATCTCAGGGTTTTGCCCAATAGTCATATTTGTTCTCAGGCTGATTAGATCTACTTCAGATTTTGGAGATGTTATCATGTGGTTCCCAAGATTCTTACCATCTTATAATACAGTTGGAGGAATTATTGTAATAGCAATGAAGGATCTATTGGCTAATGATAGAAAAGAAAAGGCTCCTGGGCCTCTCTCATTTGACGCTGCTGGAGGAGACCTCATTCTTTTAATCTTCCATGCATTCTTTTGGCCAATCATGCTTATCTTAATTGAAAAAGGATTCTTTGATTTTCTGAGAAAGAAAGGAAAATCCATTGAAGAAGAGGAAGAAATTCTTGATAATGATGTCCTTAAAGAACGAAATAGAGTAGAAGAAACTTCAGAATCAGAGCTTGCTGTTAAAGTCAGCCATTTAAGAAAAGTCTATGGAAACAATGTTGCAGTGAAAGATGTATCCTTTGGGTTGGAGTTTGGAGACTGCTTTTGCCTTCTCGGAGTCAACGGAGCTGGAAAAACTTCTACTTTCAAAATGCTCACTGGTGATATTGTTCCAACTAAAGGAGACTCATATATCTGTGGAAATAATGTTAATAGCAATTTCTCAGAAGTAAGAAAGCAAATAGGGTATTGCCCTCAGTTTGACTGTATTTTCGATATGATGACAGTAAGAGAGCATCTTGAGTTTTACACTAAGATCAAGAAGATTCCTAAAGAATATACTTCTAAATTGATCTCAGAACAGTTGAAGAGCATGAATCTAGAACAGTATGAGAACAAGCTTGCAGGAACA", DNA=True )
	#s = BiologicalSequence( "AAAAAAAAAACTTAAATTATGGAAACAATCCTTGAAGTAACAGAAAATGCTTCAAAAGACAAGAGCTCCTTTCTGTTGAAGGGAGGTGATAGGACAAGTTCTTTCTCAAAGGGATGCATCAGCCTCAGAAGATACACAGAGGAGAAAATTGTTCATTGCCAACTTGAAAAGGAGAATATTGGCATTATTCATTCAGAAAAGAAGCATCAGCCAGGCTTGAAGATCACTAGAGAGAGTTCCTTACTTCAAACCCAAAAGTCTGGTCGGAACCTGATCAAAAATGAAGAAAGTGATATCTTCCTGACTCCTAGAAGTGGTTGCCTAGCAGACATGAACTGTATCACCCCAAGCCTACAGAAAAGAGTGGAGACTCCTATCAGGAAGGAGGATGTCTTCCAGTCACCTCTGTTCTCAACCATTGAAATGGAAAGCCAGACTGGCGGCAATAGCTCCGGCCAAAGGACAGATGGAAGAGAGTACTTCGAAGCTGTCGAAGAGAAAAAGATTGTACATCAGAAAACTCCATTGAGAGAGAGACGTTTTGGTAGCAATGAGAGGGTTGATTCTGTTTTTCCTTTACTTCCAGAAACTCCAGAAGATATTAAGAAGAAGACTAGTAAAAGACAGC", DNA=True )
	#s = BiologicalSequence( "TAGAGAAAAGAAAGGAAAAGACATGGCTCCTATCGACTCCAAGTACAAGATTATTGAGTTCCAGTCTTTGGGAACTAAAGTTAAGAACTTCTCCAAGTTCATGGTGGCTAACCCCACCAACCACAGATATGACTTCGAGTGGGAAGAAGTGGAAGACCAAGACATTGCCAAGACTGAAGTTAAGAAGGAGAAGCCAGTATTTAGGTGCCTCACTCCAAAGGGGACAATCCTTAGTGGAAAGAAATTTAAAGTGAATTTCGAATACATTCCAGACCATGTAGGAGAGCACTACAGTTACTGGAACTTCAAGATCCCTGCCGAAGGAATAGTGCAACCCTTCATGCTTGCAGGATTTGTTGTAGAACCAATGGTACTAATCGAAACTGGAAAGATTAACTTTGGACCATTACTAATTGGTGGAAAGAGTAGAGAAACTGTAAACCTAATCAACCAGGAACACATTCCATTTACTTTCTACTTTAACAAAAACTCTATCAACGAGAACCCTGATTATGGAGATTCTTTGAAGATTTCTCCTCTTTCTGGAACTGTTCCTCCTCAATCTCAAGTGCCAATTGAGGTATTATTCAAGCCAAAATATGAGACTGAGTACAATTACAACTTAATCTGTAATGTCAAAAACAAAGCAAGACCACTGGTGCTCAATGCTAAAGGAGTTGGCTATTCCATCCACTACGGAGTTCTTGCAGACAAAGCCCAAATTCCGGTTCTGCCTACTGAGTCTCACAGCTTTGAATTCGGAGACTTCTTTGTGAACGAAAAGAAAACCAAATCAATCATCATAGAAAACAAGGGAGACTTCAGCTTTGACTTCCAGTTCAAGAGGCAAGCCAACAAATATATAACGATTGAGCCTGAGAATGGCACTGTCAATAAAGGAAACAGTCTCAAT", DNA=True )
	#s = BiologicalSequence( "TCAAGAAATTTGAGGAGATTGAAGAAGGTGTGAAAGGCAAGAAAAAGCTGCAGAATATCTGGATAGTAAAACCTGGTGAAAATACCAACAGAGGCAATGGAATTACTGTTTGAAGAGAAATCTCGCAAATTATTAGCCTAGTAGATAGTAATGTAAAGCTCAATAATGGAAAGAGGAGGAGCTACATTGTCCAAAAATATATAGAAAATCCTCTGCTCATCAACAGAAGAAAGTTTGATATCAGGTGATTCTCTCTTGTAACCTCCATGAACGGCAATATATGAGGGTATTGGTACAAAGATGGGTATATCAGAACAGCTTGTAAGGAGTTCTCTCTGAAGAACGTCTCAAATAAATATATTCACCTGACTAACGATGCAATACAAAAATATTCTAACTCATATGGAAAATATGAGGATGGTAATAAGCTCAGTTATAAAGAGTTTCAGAAGCATTTTGAGGTAAATTGACCAGATATGAAGGTTGACTTTGACAAGATTTATCCACAAATGAAGAAGCTTGCAGCTGATACTATAAAAGCTACTTATATGCAGATCGACCCAAATAAAAACCATCATACCTTTGAGCTGTTTGGGTATGATTTCATGGTAGATGAGAATCAGAAGGTTTGGCTTATAGAAGTAAACACCAATCCGTGCCTTGAGCTTTCTAGTAGCCTGTTATCAAGACTTATCCCAGCACTAGTCGAGAATGTAGCTAAGGTAGCAATCGACCCTGTTTTTCCAGCTCCAGAGTGGTCTAATTCTAGGAAAGGACAAATACCTGATTTCTCTGAGAATAAATTTGAGTTGGTATTTAACGAATCTAAGGATGGTGATGAGTTGAGAGAAATTTTAAAGCAAGCAAATTTGAAGGATATTATCAGAGAAGAAGATGAGCAAGAGTCTGCTGAAGATGATGACTCTGACGAAGACAATGATGAAGATGAAGAAGAGTAGATCCCATCTTAATTTTTATGCAAGCTTGTATTTTC", DNA=True )
	#s = BiologicalSequence( "AAAACTTTTGAAATTTTAAATATTTTAAGATGGACATGAATACTAACAACATTGTAGGATCAGTTCTCGGCGAAAGAAGACTGGAAATGAAAGATTCTACAAACATCATACACCTCAAGGACCAGAAGTATTACCAAGATAAAAACAGGAGGAAATTAGAAGAGTTAGTGACACAAGAGAATAAAGAAAACACTAATCTTGTGACACTTAGTAGAAAAGACTCAAAAAGAGACCAAAGGAATAATAGCTCTGAGCCCAAAAGTACCGGACAAACGAATCAATGTTGAGATAAAGAGAATGTCCCTTTCCATGCTTTTTCTCCCCAACCACAGAGAAAAGGCTTACTTCCTAGAGTTCAGAGGCTTCGGGATAAAGGCAAGAAGACACTGATACTTGATCTTGACGAGACTCTTGTCCATTCCTCTTTTGATAAGTGAAAATGTGACTTAGAGCTCCCCATCATAATGGATAACCAGAGATATATAGTCTATGTCAAAATCAGGCCTCGAGCAATAGATTTTCTGCGAAAAATTACTAAATACTACGAAGTTGCCATTTTCACAGCTTCAGTAGCAGACTATGCTGACCCACTAATCGACAAGTTAGATACAAATAATTATGGATTCTATAAATTATTTCGGGAACACTGAACTTACAACGGAAATTACACTAAAGATTTGTCAAAACTTGGCAGAGACCTAAAAGACTGCATTATTGTGGACAATCTACCCAAAAGTTATGTGAACCAGCCAGAGAATGGCATCCCGATTCTCTCATGGTATGATGATAGAAATGATAAAGAGCTCGACGCTCTCTTTCCATTGCTAATCGCCCTCTCTAAGGTCGGAGATGTTCGAAAACGTATTAAAAGATTTGTGAAGAAAGACAGAATCGATTATGAATCCTTATTCTCTGCATTTGAAAAGAAACCAGATTTACACCACTTTGTACGCAAGATATTAGGGATTAAGCGGGCTCCATTCTCACCAAGAAGACATGCTAAATCACCAAAGGATAATTTGGACTCTAAAAGAGACAAGGAAAATAGGAATATTACCTCTAATGATCCTGAGAGCTCATCT", DNA=True )
	#s = BiologicalSequence( "AAAAAAATTTAGAATTTTTAAAAAGGTGATGATCAAGACCTATGAGGAAGAATACCTTGATAATTTCAAGAAGTATAGAAAAGCAAAAGCAGAAATGCAAGTTTCCAGCGACAAAAAGCTAGAGCAAGCATTTAAAGATATGCAGTTCTACAGTAAAGAAGCTAAGGGGTCATATGAGCAATTCTCTTTATCAGTCAAGGAACTAGACTTCTCAGAACAACTTCCTTTCCAAAGAAAAGTCAATGAGTTTTCCAACCAAGTTGAGTTAATGCGGAAAGAAGTCAATAAAGCTCAAAGAGACTATGGGTTTATTAAGAATAAAGAGAATTTGTATGGCTCTCACTGGAATGAGCACTCTGATACGGAATCTTACCAGAGCCAGAGACTTTTAGGCGAGAATACACCTCTTTCAGACCAACATAATAAGCTGAATCAGGTCATACGAGTCGGACATGAAACTGAGGTCATTGCCCAAGACACTAAGTTCAACTTAGCTAAAGACACTGAGAAAATGCAGAGAATTCGGGATAATATTGGAAGAGTTGATGATGAAATGACCATTTCTGATAAGCTTATTGATATCATTAGAAGGAATGAGTCCCGAAACCGCTTTATTCTATATTCAGTCGCCTTCGTTATAGTAGCAGCAATTTTGATCATGCTGTTTGCCAAAATATTCAAGAGATAATCAGAGAGCGGACATTTATAATTTTCATCCCG", DNA=True )

def main( fasta_file ):
	bad_sequence = [ "comp1705_c0_seq1", "comp1716_c0_seq1", "comp1809_c0_seq1", "comp2102_c0_seq1" ]
	c = 0
	for seq_record in SeqIO.parse( fasta_file, "fasta" ):
		if c > 10: break
		if seq_record.id.split( " " )[0] in bad_sequence:
			continue
		fname = seq_record.id.split( " " )[0] + ".fa"
		sequence = str( seq_record.seq )
		s = BiologicalSequence( sequence, DNA=True )	
		s.build_tree()
		with open( fname, 'w' ) as f:
			for i in xrange( 3 ):
				all_paths = s.tree.get_frame_paths( i )
				for a in all_paths:
					frameshift_sequence, fragments, frameshift_signals = s.frameshift_from_path( a )
					print >> f, ">%s" % "|".join( map( lambda x: "%s:%s" % x, s.path )) + ";" + ",".join( frameshift_signals )
					print >> f, frameshift_sequence
		c += 1

if __name__ == "__main__":
	try:
		fasta_file = sys.argv[1]
	except IndexError:
		raise InputError( "Missing input file" )
	
	main( fasta_file )